gridSize = 4
returnTrip = ((gridSize - 1) * 5) + 2
 
function goForward(times)
  if times == nil then
    times = 1
  end
 
  for i = 1, times do
    if turtle.getFuelLevel() < 80 then
      turtle.select(1)
      turtle.refuel(3)
    end
 
    if not turtle.forward() then
      os.sleep(1)
      goForward(1)
    end
  end
end
 
function placeOrDig()
  turtle.select(3)
  if turtle.compare() then
    print("found a tree!")
    turtle.dig()
    goForward()
 
    while turtle.detectUp() do
      turtle.digUp()
      turtle.up()
    end
 
    while not turtle.detectDown() do
      turtle.down()
    end
 
    turtle.back()
    turtle.select(2)
    turtle.place()
  else
    turtle.select(2)
    turtle.place()
  end
end
 
function nextTick()
  turtle.turnLeft()
  goForward(5)
  turtle.turnRight()
 
  placeOrDig()
end

function take(slot, number)
  turtle.select(slot)
  turtle.suckDown()
  toDrop = turtle.getItemCount(slot) - number

  if toDrop > 0 then
    turtle.dropDown(toDrop)
  end
end
 
while true do
  turtle.turnRight()
  goForward(2)
  take(2, 64)
  turtle.back()
  turtle.back()
  turtle.turnLeft()
  goForward(2)
  take(1, 64)
  turtle.back()
  turtle.back()
  take(3, 1)

  for i = 1, gridSize do
    goForward(2)
    turtle.turnRight()
    goForward()
 
    placeOrDig()
 
    for j = 2, gridSize do
      nextTick()
    end
 
    turtle.turnRight()
    goForward(returnTrip)
    turtle.turnLeft()
    goForward(4)
    turtle.turnLeft()
  end
 
  turtle.turnLeft()
  goForward(returnTrip + 3)
 
  toDrop = turtle.getItemCount(3) - 1
  turtle.select(3)
  turtle.dropDown(toDrop)
 
  turtle.turnRight()
 
  os.sleep(15)
end
